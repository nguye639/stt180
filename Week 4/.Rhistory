}
}
return(primes)
}
all.primes(n = 10)
all.primes = function(n){
primes = c()
for(x in 1:n){
for (i in 2:(x-1)) {
test = x %% i
if (x ==2 ){
primes = c(primes,x)
}else if (test != 0 = TRUE){
all.primes = function(n){
primes = c()
for(x in 1:n){
for (i in 2:(x-1)) {
test = x %% i
if (x ==2 ){
primes = c(primes,x)
}else if (test != 0){
primes = c(primes,x)
}
}
}
return(primes)
}
all.primes(n = 10)
all.primes = function(n){
primes = c()
for(x in 1:n){
for (i in 2:(x-1)) {
test = x %% i
if (x ==2 ){
primes = c(primes,x)
}else if (test == 0){
primes = c(primes,x)
}
}
}
return(primes)
}
all.primes(n = 10)
all.primes = function(n){
primes = c()
for(x in 1:n){
for (i in 2:(x-1)) {
test = x %% i
print(test)
if (x ==2 ){
primes = c(primes,x)
}else if (test != 0){
primes = c(primes,x)
}
}
}
return(primes)
}
all.primes = function(n){
primes = c()
for(x in 1:n){
for (i in 2:(x-1)) {
test = x %% i
print(test)
if (x ==2 ){
primes = c(primes,x)
}else if (test != 0){
primes = c(primes,x)
}
}
}
return(primes)
}
all.primes(7)
all.primes = function(n){
primes = c()
for(x in 1:n){
for (i in 2:(x-1)) {
test = x %% i
print(test)
if (x ==2 ){
primes = c(primes,x)
}else if (test != 0 & x != 2){
primes = c(primes,x)
}
}
}
return(primes)
}
all.primes(7)
NutritionStudy
summary(NutritionStudy)
setwd()
load("~/Documents/STT 180/Project/NutritionStudy.rda")
NutritionStudy
summary(NutritionStudy)
data = NutritionStudy
summary(data)
plot(data$BetaDiet, data$BetaPlasma)
data = NutritionStudy
head(data, n = 10)
summary(data)
data = NutritionStudy[-1]
head(data, n = 10)
summary(data)
plot(data$BetaDiet, data$BetaPlasma)
plot(data$RetinolDiet, data$RetinolPlasma)
install.packages("corrplot")
library(corrplot)
data = NutritionStudy[-1]
head(data, n = 10)
summary(data)
rquery.cormat(data)
source("http://www.sthda.com/upload/rquery_cormat.r")
rquery.cormat(data)
head(data, n = 10)
summary(data)
data$Smoke
library(corrplot)
data = NutritionStudy
data = subset(data, -c('ID',"Smoke","VitaminUse"))
library(corrplot)
data = NutritionStudy
data = subset(data, select = -c('ID',"Smoke","VitaminUse"))
library(corrplot)
data = NutritionStudy
head(data, n = 10)
summary(data)
#smoker: 1 is never, 2 is previous, 3 is current
#vitamin use: 1 is regualr, 2 is occassioanlly, 3 is never
library(corrplot)
data = NutritionStudy
head(data, n = 10)
summary(data)
#smoker: 1 is never, 2 is previous, 3 is current
#vitamin use: 1 is regualr, 2 is occassioanlly, 3 is never
library(corrplot)
data = NutritionStudy
data = data[-1,-3,-16]
head(data, n = 10)
summary(data)
#smoker: 1 is never, 2 is previous, 3 is current
#vitamin use: 1 is regualr, 2 is occassioanlly, 3 is never
library(corrplot)
data = NutritionStudy
#data = data[-1,-3,-16]
head(data, n = 10)
summary(data)
#smoker: 1 is never, 2 is previous, 3 is current
#vitamin use: 1 is regualr, 2 is occassioanlly, 3 is never
library(corrplot)
data = NutritionStudy
data = data[-1,-3,-16]
head(data, n = 10)
summary(data)
#smoker: 1 is never, 2 is previous, 3 is current
#vitamin use: 1 is regualr, 2 is occassioanlly, 3 is never
library(corrplot)
data = NutritionStudy
#data = data[-1,-3,-16]
head(data, n = 10)
summary(data)
#smoker: 1 is never, 2 is previous, 3 is current
#vitamin use: 1 is regualr, 2 is occassioanlly, 3 is never
library(corrplot)
data = NutritionStudy
data = data[c(-1,-3,-16)]
head(data, n = 10)
summary(data)
#smoker: 1 is never, 2 is previous, 3 is current
#vitamin use: 1 is regualr, 2 is occassioanlly, 3 is never
library(corrplot)
library(tidyverse)
data = NutritionStudy
data = data[c(-1,-3,-16)]
head(data, n = 10)
summary(data)
#smoker: 1 is never, 2 is previous, 3 is current
#vitamin use: 1 is regualr, 2 is occassioanlly, 3 is never
library(corrplot)
library(tidyverse)
data = NutritionStudy
data = data[c(-1,-3,-16)]
head(data, n = 10)
#smoker: 1 is never, 2 is previous, 3 is current
#vitamin use: 1 is regualr, 2 is occassioanlly, 3 is never
library(corrplot)
library(tidyverse)
data = NutritionStudy
data = data[c(-1,-3,-16)]
head(data, n = 10)
data <- data %>%
mutate(Gender = ifelse(Gender == "Female",0,1))
#smoker: 1 is never, 2 is previous, 3 is current
#vitamin use: 1 is regualr, 2 is occassioanlly, 3 is never
library(corrplot)
library(tidyverse)
data = NutritionStudy
data = data[c(-1,-3,-16)]
data <- data %>%
mutate(Gender = ifelse(Gender == "Female",0,1))
head(data, n = 10)
#smoker: 1 is never, 2 is previous, 3 is current
#vitamin use: 1 is regualr, 2 is occassioanlly, 3 is never
data$Gender
source("http://www.sthda.com/upload/rquery_cormat.r")
rquery.cormat(data)
source("http://www.sthda.com/upload/rquery_cormat.r")
rquery.cormat(data, type="full")
source("http://www.sthda.com/upload/rquery_cormat.r")
rquery.cormat(data,  graphType="heatmap")
source("http://www.sthda.com/upload/rquery_cormat.r")
rquery.cormat(data,  Type="full")
source("http://www.sthda.com/upload/rquery_cormat.r")
rquery.cormat(data,  type="full")
rquery.cormat(data,  graphType="heatmap")
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warning = FALSE,
comment = NA)
all.primes = function(n){
primes = c()
for(x in 1:n){
for (i in 2:(x-1)) {
test = x %% i
print(test)
if (x ==2 ){
primes = c(primes,x)
}else if (test != 0){
primes = c(primes,x)
}
}
}
return(primes)
}
all.primes(7)
all.primes = function(n){
primes = c()
x = seq(2, n)
primes = c()
for (i in seq(2, n)) {
if (any(x == i)) {
primes = c(primes, i)
x = c(x[(x %% i) != 0], i)
}
return(primes)
}
all.primes(7)
all.primes = function(n){
primes = c()
x = seq(2, n)
primes = c()
for (i in seq(2, n)) {
if (any(x == i)) {
primes = c(primes, i)
x = c(x[(x %% i) != 0], i)
}
return(primes)
}
}
all.primes(7)
all.primes = function(n){
primes = c()
x = seq(2, n)
primes = c()
for (i in seq(2, n)) {
if (any(x == i)) {
primes = c(primes, i)
x = c(x[(x %% i) != 0], i)
}
return(primes)
}
}
all.primes(10)
all.primes = function(n){
primes = c()
x = seq(2, n)
primes = c()
for (i in seq(2, n)) {
if (any(x == i)) {
primes = c(primes, i)
x = c(x[(x %% i) != 0], i)
}
return(primes)
}
}
all.primes(13)
all.primes() <- function(n) {
if (n >= 2) {
x = seq(2, n)
prime_nums = c()
for (i in seq(2, n)) {
if (any(x == i)) {
prime_nums = c(prime_nums, i)
x = c(x[(x %% i) != 0], i)
}
}
return(prime_nums)
}
else
{
stop("Input number should be at least 2.")
}
}
all.primes <- function(n) {
if (n >= 2) {
x = seq(2, n)
prime_nums = c()
for (i in seq(2, n)) {
if (any(x == i)) {
prime_nums = c(prime_nums, i)
x = c(x[(x %% i) != 0], i)
}
}
return(prime_nums)
}
else
{
stop("Input number should be at least 2.")
}
}
all.primes(13)
all.primes <- function(n) {
x = seq(2, n)
prime_nums = c()
for (i in seq(2, n)) {
if (any(x == i)) {
prime_nums = c(prime_nums, i)
x = c(x[(x %% i) != 0], i)
}
}
return(prime_nums)
}
else
all.primes <- function(n) {
x = seq(2, n)
prime_nums = c()
for (i in seq(2, n)) {
if (any(x == i)) {
prime_nums = c(prime_nums, i)
x = c(x[(x %% i) != 0], i)
}
}
return(prime_nums)
}
all.primes <- function(n) {
x = seq(2, n)
prime_nums = c()
for (i in seq(2, n)) {
if (any(x == i)) {
prime_nums = c(prime_nums, i)
x = c(x[(x %% i) != 0], i)
}
}
return(prime_nums)
}
all.primes(13)
all.primes <- function(n) {
x = seq(2, n)
primes = c()
for (i in seq(2, n)) {
if (any(x == i)) {
primes = c(primes, i)
x = c(x[(x %% i) != 0], i)
}
}
return(primes)
}
all.primes(13)
all.primes(n = 10)
all.primes(n = 21)
all.primes(n = 2)
knitr::opts_chunk$set(echo = TRUE, comment = NA)
data = read.csv(NHANES_processed.csv)
load("~/Documents/STT 180/Week 4/NHANES_processed.csv")
data = read.csv(NHANES_processed.csv)
data = read.csv(NHANES_processed.csv)
load("~/Documents/STT 180/Week 4/NHANES_processed.csv")
setwd(~/Documents/STT 180/Week 4/)
setwd(~Documents/STT 180/Week 4/)
setwd(~Documents/STT 180/Week 4)
setwd("~Documents/STT 180/Week 4")
setwd("~/Documents/STT 180/Week 4/")
data = read.csv(NHANES_processed.csv)
data = read_csv(NHANES_processed.csv)
data = read.csv(file = "NHANES_processed.csv")
data = read.csv(file = "NHANES_processed.csv")
head(data)
library(ggplot2)
data = read.csv(file = "NHANES_processed.csv")
head(data)
ggplot(data, aes(x = temp)) + geom_histogram()
stat_ecdf(data = data$temp)
stat_ecdf(data)
stat_ecdf(data, aes(x = temp))
stat_ecdf(data, mappeing = aes(x = temp))
ggplot(data, aes(x = temp)) + stat_ecdf()
quantile(data$temp)
quantile(data$temp)
summary(data$temp)
mean(data$temp)
median(data$temp)
census = read.csv("CensusNames.csv")
census = read.csv("CensusNames.csv")
head(census)
census = read.csv("CensusNames.csv")
head(census)
"Le" %in% census$name
census = read.csv("CensusNames.csv")
head(census)
"nguyen" %in% census$name
census = read.csv("CensusNames.csv")
head(census, n = 5)
"Nguyen" %in% census$name
census = read.csv("CensusNames.csv")
census
"Nguyen" %in% census$name
census = read.csv("CensusNames.csv")
head(census)
"NGUYEN" %in% census$name
census = read.csv("CensusNames.csv")
head(census)
"NGUYEN" %in% census$name
which("NGUYEN" %in% census$name)
census = read.csv("CensusNames.csv")
head(census)
"NGUYEN" %in% census$name
which(grepl("NGUYEN",census$name ))
census = read.csv("CensusNames.csv")
head(census)
"NGUYEN" %in% census$name
census[census$name == "NGUYEN"]
census = read.csv("CensusNames.csv")
head(census)
"NGUYEN" %in% census$name
census[census$name == "NGUYEN",]
nguyen = census[census$name == "NGUYEN",]
ggplot(nguyen, aes(x = name)) + geom_histogram()
ggplot(census, aes(x = name)) + geom_histogram()
ggplot(census, aes(x = count)) + geom_histogram()
ggplot(census, aes(x = count)) + geom_histogram() + scale_y_continuous(trans = 'log10')
ggplot(census, aes(x = count)) + geom_histogram() + scale_y_continuous(trans = 'log10')
ggplot(census, aes(x = count)) + stat_ecdf()
ggplot(census, aes(x = count)) + geom_histogram() + scale_y_continuous(trans = 'log10')
ggplot(census, aes(x = count)) + stat_ecdf() + scale_y_continuous(trans = 'log10')
ggplot(census, aes(x = count)) + geom_histogram()
ggplot(census, aes(x = count)) + stat_ecdf()
#The data is very skewed towards the upper ranks (Just as Benfords law states!)
ggplot(census, aes(x = log10(count))) + geom_histogram()
ggplot(census, aes(x = log10(count))) + stat_ecdf()
#25th = 2.2, 50th = 2.4, 75th = 2.6
summary(log10(census$count))
#25th = 2.2, 50th = 2.4, 75th = 2.6
summary(log10(census$count))
quantile(log10(census$count))
#The values are similar, just hard to hand read the graph
knitr::opts_chunk$set(echo = TRUE, comment = NA)
paretoCDF = function(alpha,x0,x){
pareto = 1 - (x0/x)**(alpha - 1)
return(pareto)
}
paretoCDF = function(alpha,x0,x){
pareto = 1 - (x0/x)**(alpha - 1)
return(pareto)
}
paretoCDF(alpha = 2, x0 = 1, x = c(0,0.5,2,4,5))
paretoCDF = function(alpha,x0,x){
pareto = 1 - (x0/x)**(alpha - 1)
return(pareto)
}
paretoCDF(alpha = 2, x0 = 1, x = c(0,0.5,2,4,5))
paretoCDF(alpha = 2, x0 = 1, x = seq(0,20, length.out = 20))
testFun <- function(r = 2, m = 1, x){
out <- m*x^r -m
return(out)
}
library(ggplot2)
ggplot(data = data.frame(x = c(-5, 5)), aes(x)) + stat_function(fun = testFun, args = list(r = 4, m = 2))
ggplot(data = data.frame(x = c(-5, 5)), aes(x)) + stat_function(fun = paretoCDF, args = list(alpha = 2, x0 =1))
ggplot(data = data.frame(x = c(1,10)), aes(x)) + stat_function(fun = paretoCDF, args = list(alpha = 2, x0 =1))
ggplot(data = data.frame(x = c(1,10)), aes(x)) + stat_function(fun = paretoCDF, args = list(alpha = 2, x0 =1))
+ stat_function(fun = paretoCDF, args = list(alpha = 3.2, x0 =1))
ggplot(data = data.frame(x = c(1,10)), aes(x)) + stat_function(fun = paretoCDF, args = list(alpha = 2, x0 =1))  + stat_function(fun = paretoCDF, args = list(alpha = 3.2, x0 =1))
ggplot(data = data.frame(x = c(1,10)), aes(x)) + stat_function(fun = paretoCDF, args = list(alpha = 2, x0 =1))  + stat_function(fun = paretoCDF, args = list(alpha = 3.2, x0 =1)) + stat_function(fun = paretoCDF, args = list(alpha = 4, x0 =1))
ggplot(data = data.frame(x = c(1,10)), aes(x)) + stat_function(fun = paretoCDF, args = list(alpha = 2, x0 =1))  + stat_function(fun = paretoCDF, args = list(alpha = 3.2, x0 =1), color = 'blue') + stat_function(fun = paretoCDF, args = list(alpha = 4, x0 =1))
ggplot(data = data.frame(x = c(1,10)), aes(x)) + stat_function(fun = paretoCDF, args = list(alpha = 2, x0 =1))  + stat_function(fun = paretoCDF, args = list(alpha = 3.2, x0 =1), color = 'blue') + stat_function(fun = paretoCDF, args = list(alpha = 4, x0 =1), color = 'red')
paretoQuartile = function(alpha, x0, p){
Q = x0(1-p)**-(1/(1-aplha))
return(Q)
}
paretoQuartile(3.5,1,c(.25,.5,.75))
paretoQuartile = function(alpha, x0, p){
Q = x0*(1-p)**-(1/(1-aplha))
return(Q)
}
paretoQuartile(3.5,1,c(.25,.5,.75))
paretoQuartile = function(alpha, x0, p){
Q = x0*(1-p)**-(1/(1-alpha))
return(Q)
}
paretoQuartile(3.5,1,c(.25,.5,.75))
paretoQuartile = function(alpha, x0, p){
Q = x0*(1-p)**-(1/(alpha-1))
return(Q)
}
paretoQuartile(3.5,1,c(.25,.5,.75))
paretoQuartile = function(alpha, x0, p){
Q = x0*(1-p)**-(1/(alpha-1))
return(Q)
}
paretoQuartile(3.5,1,c(.25,.5,.75))
paretoQuartile(3,2,c(.1,.5,.8))
